#!/usr/bin/env python

import os
import sys
import signal
import pyaml
import time
import logging
import syslog
import daemon
import daemon.runner
import lockfile
from cronify import cronify
CFG_FILE = "/etc/cronify.yaml"
PID_FILE = "/tmp/cronify.pid"
LOG_FILE = "/var/log/cronify/cronify.log"

logger = logging.getLogger('cronify.cronify')
_handler = logging.StreamHandler()
log_format = logging.Formatter('%(name)s - %(threadName)s - %(asctime)s - %(levelname)s - %(message)s')
_handler.setFormatter(log_format)
logger.addHandler(_handler)
logger.setLevel(logging.INFO)

watcher = None

def start_watcher():
    """Read config file, start watcher and return Watcher object"""
    cfg_fileh = open(CFG_FILE, 'r')
    data = pyaml.yaml.load(cfg_fileh)
    cfg_fileh.close()
    syslog.syslog("Cronify daemon starting..")
    return cronify.Watcher(data)

def testy():
    while 1:
        syslog.syslog('Running..')
        # syslog.closelog()
        time.sleep(5)

class CronifyDaemon(object):

    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path = PID_FILE
        self.pidfile_timeout = 5
        self.watcher = None

    def cleanup(self, signum, frame):
        syslog.syslog('Cronify shutting down..')
        self.watcher.cleanup()
        sys.exit(0)

    def run(self):
        # testy()
        self.watcher = start_watcher()

context = daemon.DaemonContext(
    pidfile=lockfile.FileLock(PID_FILE),
    )

cronifyd = CronifyDaemon()

context.signal_map = {
    signal.SIGTERM : cronifyd.cleanup,
    # signal.SIGCHLD : cleanup,
    # signal.SIGHUP: 'terminate',
    # signal.SIGUSR1: reload_program_config,
    }

if __name__ == "__main__":
    daemon_runner = daemon.runner.DaemonRunner(cronifyd)
    daemon_runner.daemon_context = context
    daemon_runner.do_action()
